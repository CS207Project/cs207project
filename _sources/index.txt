.. cs207project documentation master file, created by
   sphinx-quickstart on Fri Apr 29 16:48:18 2016.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

==================
TimeSeries Utility
==================
(team CS207Project)

.. toctree::
   :maxdepth: 2

   authors
   changes
   license
   api/modules

Description
-----------

Usage
-----

1. Setup
~~~~~~~~
- Start the Database Server:


    python go_server.py

- Start the Web Server:


    python web_server.py

2. API Quick Guide
~~~~~~~~~~~~~~~~~~

a. SELECT
Select from the timeseries database.

- Endpoint: **/select**
- Verb: **GET**
- Format: json text as a parameter with the key 'query'- i.e url ends with `?query=json_text`
- Example:

::

    payload = {'where':{'order': {'>=' : 1}},
        'fields':['order','vp'],
        'additional':{'sort_by':'-order',
        'limit':10}}

    requests.get(server_url+'/select',
        params={'query':json.dumps(payload)}).content

b. AUGMENTED SELECT

- Endpoint: **/augselect**
- Verb: **GET**
- Format: json text as a parameter with the key 'query'- i.e url ends with `?query=json_text`
- Example:

::

    m, queryts = tsmaker(0.5, 0.2, 0.1)
    payload = {'proc':'corr', 'target':'d', 'arg':queryts.to_json(), 'where': {'pk': v}}
    requests.get(server_url+'/augselect', params={'query':json.dumps(payload)}).content

c. INSERT TIMESERIES

- Endpoint: **/tsdb/add/ts**
- Verb: **POST**
- Example:

::

    def make_insert_ts(primary_key,t):
        return json.dumps({'primary_key':primary_key,'ts':t.to_json()})

    meta1,ts1 = tsmaker(0.1,0.2,0.3)
    requests.post(server_url+'/add/ts', make_insert_ts('ts-1', ts1))


d. UPSERT METADATA

- Endpoint: **/tsdb/add/metadata**
- Verb: **POST**
- Example:

::

    def make_upsert_meta(primary_key, metadata_dict):
        return json.dumps({'primary_key':primary_key, 'metadata_dict': metadata_dict})

    meta1,ts1 = tsmaker(0.1,0.2,0.3)
    requests.post(server_url+'/add/metadata', make_upsert_meta('ts-1', meta1))

e. INSERT TRIGGER

- Endpoint: **/tsdb/add/trigger**
- Verb: **POST**
- Example:

::

    def make_add_trigger(proc, onwhat, target, arg):
        if hasattr(arg,'to_json'):
            arg = arg.to_json()
        return json.dumps({'proc':proc,'onwhat':onwhat,'target':target,'arg':arg})

    m, queryts = tsmaker(0.5, 0.2, 0.1)
    requests.post(server_url+'/add/trigger', make_add_trigger('corr', 'insert_ts', 'd', queryts))

f. REMOVE TRIGGER

- Endpoint: **/tsdb/remove/trigger**
- Verb: **POST**


Note
----

This project has been set up using PyScaffold 2.5.5. For details and usage
information on PyScaffold see http://pyscaffold.readthedocs.org/.

Indices and tables
------------------

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
