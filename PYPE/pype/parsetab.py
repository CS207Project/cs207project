
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'C36B394BEFF76DAE7A43FD9781823637'
    
_lr_action_items = {'LBRACE':([0,2,4,6,9,10,18,28,],[1,-5,1,-4,-2,-3,-7,-6,]),'INPUT':([16,],[20,]),'$end':([2,4,5,6,9,10,18,28,],[-5,-1,0,-4,-2,-3,-7,-6,]),'LPAREN':([0,2,4,6,7,9,10,11,12,13,14,15,18,19,20,21,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,51,52,53,54,55,57,58,],[3,-5,3,-4,16,-2,-3,-26,16,-28,-9,-27,-7,-8,30,16,16,30,16,16,16,-6,-11,-15,-17,30,16,-30,16,16,-21,-13,30,16,16,16,-10,-14,-25,-29,-20,-12,-23,-22,-24,-19,-16,]),'ID':([1,7,8,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,57,58,],[7,11,17,-26,11,-28,-9,-27,23,-8,32,11,36,11,32,11,11,11,-11,45,-15,-17,32,11,-30,11,11,-21,-13,32,11,11,11,56,-18,-10,-14,-25,-29,-20,-12,-23,-22,-24,-19,-16,]),'RBRACE':([11,12,13,14,15,19,29,38,39,46,48,51,52,53,54,55,57,],[-26,18,-28,-9,-27,-8,-11,-21,-13,-10,-25,-20,-12,-23,-22,-24,-19,]),'OUTPUT':([16,],[24,]),'OP_SUB':([16,],[25,]),'NUMBER':([7,11,12,13,14,15,19,21,23,25,26,27,29,34,35,36,37,38,39,41,42,43,46,48,49,51,52,53,54,55,57,],[15,-26,15,-28,-9,-27,-8,15,15,15,15,15,-11,15,-30,15,15,-21,-13,15,15,15,-10,-25,-29,-20,-12,-23,-22,-24,-19,]),'OP_ADD':([16,],[26,]),'RPAREN':([11,13,15,17,20,23,24,29,31,32,33,34,35,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,],[-26,-28,-27,28,29,38,39,-11,-15,-17,46,48,-30,51,-21,-13,52,53,54,55,-10,-14,-25,-29,57,-20,-12,-23,-22,-24,58,-19,-16,]),'STRING':([7,11,12,13,14,15,19,21,23,25,26,27,29,34,35,36,37,38,39,41,42,43,46,48,49,51,52,53,54,55,57,],[13,-26,13,-28,-9,-27,-8,13,13,13,13,13,-11,13,-30,13,13,-21,-13,13,13,13,-10,-25,-29,-20,-12,-23,-22,-24,-19,]),'OP_DIV':([16,],[21,]),'OP_MUL':([16,],[27,]),'IMPORT':([3,],[8,]),'ASSIGN':([16,],[22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,4,],[2,9,]),'declaration_list':([20,24,],[33,40,]),'declaration':([20,24,33,40,],[31,31,47,47,]),'parameter_list':([21,23,25,26,27,],[34,37,41,42,43,]),'statement_list':([0,],[4,]),'expression_list':([7,],[12,]),'type':([30,],[44,]),'expression':([7,12,21,23,25,26,27,34,36,37,41,42,43,],[14,19,35,35,35,35,35,49,50,49,49,49,49,]),'import_statement':([0,4,],[6,10,]),'program':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',23),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',27),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',31),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',32),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_input','parser.py',39),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_input','parser.py',40),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_output','parser.py',48),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_output','parser.py',49),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',57),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',58),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',66),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',67),
  ('type -> ID','type',1,'p_type','parser.py',75),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assign','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_functioncall','parser.py',85),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_functioncall','parser.py',86),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_operator','parser.py',95),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_operator','parser.py',96),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_operator','parser.py',97),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_operator','parser.py',98),
  ('expression -> ID','expression',1,'p_identification','parser.py',108),
  ('expression -> NUMBER','expression',1,'p_literal','parser.py',112),
  ('expression -> STRING','expression',1,'p_literal','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',121),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',122),
]
