
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E2138E135544D7E3B4A652BCAD5E0643'
    
_lr_action_items = {'$end':([1,4,5,6,9,10,27,28,],[0,-4,-5,-1,-3,-2,-7,-6,]),'IMPORT':([3,],[8,]),'STRING':([7,11,13,14,15,16,20,21,22,23,24,26,29,30,35,36,37,38,39,40,41,42,47,49,50,51,52,53,54,55,56,],[15,-27,-9,-26,-28,15,15,15,15,15,15,-8,15,-11,-30,15,15,15,-21,15,15,-13,-10,-29,-24,-22,-20,-25,-23,-12,-19,]),'OP_ADD':([12,],[21,]),'OP_MUL':([12,],[20,]),'OP_DIV':([12,],[23,]),'RBRACE':([11,13,14,15,16,26,30,39,42,47,50,51,52,53,54,55,56,],[-27,-9,-26,-28,27,-8,-11,-21,-13,-10,-24,-22,-20,-25,-23,-12,-19,]),'ASSIGN':([12,],[18,]),'INPUT':([12,],[19,]),'RPAREN':([11,14,15,17,19,22,25,30,31,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,],[-27,-26,-28,28,30,39,42,-11,-15,47,-17,-30,50,51,52,-21,53,54,-13,55,56,-10,-14,-29,-24,-22,-20,-25,-23,-12,-19,58,-16,]),'LPAREN':([0,4,5,6,7,9,10,11,13,14,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,58,],[3,-4,-5,3,12,-3,-2,-27,-9,-26,-28,12,32,12,12,12,12,12,32,-8,-7,-6,12,-11,-15,32,-17,-30,12,12,12,-21,12,12,-13,32,-10,-14,-29,-24,-22,-20,-25,-23,-12,-19,-16,]),'ID':([2,7,8,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[7,14,17,-27,22,-9,-26,-28,14,29,34,14,14,14,14,14,34,-8,14,-11,-15,46,34,-17,-30,14,14,14,-21,14,14,-13,34,57,-18,-10,-14,-29,-24,-22,-20,-25,-23,-12,-19,-16,]),'LBRACE':([0,4,5,6,9,10,27,28,],[2,-4,-5,2,-3,-2,-7,-6,]),'NUMBER':([7,11,13,14,15,16,20,21,22,23,24,26,29,30,35,36,37,38,39,40,41,42,47,49,50,51,52,53,54,55,56,],[11,-27,-9,-26,-28,11,11,11,11,11,11,-8,11,-11,-30,11,11,11,-21,11,11,-13,-10,-29,-24,-22,-20,-25,-23,-12,-19,]),'OP_SUB':([12,],[24,]),'OUTPUT':([12,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type':([32,],[45,]),'declaration':([19,25,33,43,],[31,31,48,48,]),'program':([0,],[1,]),'parameter_list':([20,21,22,23,24,],[36,37,38,40,41,]),'declaration_list':([19,25,],[33,43,]),'import_statement':([0,6,],[4,9,]),'expression':([7,16,20,21,22,23,24,29,36,37,38,40,41,],[13,26,35,35,35,35,35,44,49,49,49,49,49,]),'expression_list':([7,],[16,]),'component':([0,6,],[5,10,]),'statement_list':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',23),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',27),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',31),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',32),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_input','parser.py',39),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_input','parser.py',40),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_output','parser.py',48),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_output','parser.py',49),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',57),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',58),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',66),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',67),
  ('type -> ID','type',1,'p_type','parser.py',75),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assign','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_functioncall','parser.py',85),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_functioncall','parser.py',86),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_operator','parser.py',95),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_operator','parser.py',96),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_operator','parser.py',97),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_operator','parser.py',98),
  ('expression -> ID','expression',1,'p_identification','parser.py',108),
  ('expression -> NUMBER','expression',1,'p_literal','parser.py',112),
  ('expression -> STRING','expression',1,'p_literal','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',121),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',122),
]
