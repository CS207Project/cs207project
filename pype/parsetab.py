
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D3A842A66F1699B57867968AA7CCDDEA'
    
_lr_action_items = {'LPAREN':([0,1,3,4,7,8,10,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,55,57,58,],[2,2,-4,-5,-3,-2,12,12,-27,-28,-9,-26,-6,12,31,12,12,12,31,12,-7,-8,-30,12,-15,31,-11,-17,-21,12,12,12,31,-13,12,12,-29,-22,-14,-10,-20,-24,-25,-12,-23,-19,-16,]),'ID':([5,9,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[10,11,17,21,17,-27,-28,-9,-26,17,35,17,17,17,35,42,17,-8,-30,17,46,-15,35,-11,-17,-21,17,17,17,35,-13,17,17,-29,-22,-18,56,-14,-10,-20,-24,-25,-12,-23,-19,-16,]),'RBRACE':([13,14,15,16,17,28,34,36,41,45,49,50,51,52,53,55,57,],[27,-27,-28,-9,-26,-8,-11,-21,-13,-22,-10,-20,-24,-25,-12,-23,-19,]),'RPAREN':([11,14,15,17,20,21,24,29,30,32,33,34,35,36,37,38,39,40,41,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-27,-28,-26,34,36,41,-30,45,-15,49,-11,-17,-21,50,51,52,53,-13,55,-29,-22,-14,-10,-20,-24,-25,-12,57,-23,58,-19,-16,]),'OP_ADD':([12,],[19,]),'OP_MUL':([12,],[22,]),'INPUT':([12,],[20,]),'NUMBER':([10,13,14,15,16,17,19,21,22,23,26,28,29,30,34,36,37,38,39,41,42,43,44,45,49,50,51,52,53,55,57,],[14,14,-27,-28,-9,-26,14,14,14,14,14,-8,-30,14,-11,-21,14,14,14,-13,14,14,-29,-22,-10,-20,-24,-25,-12,-23,-19,]),'STRING':([10,13,14,15,16,17,19,21,22,23,26,28,29,30,34,36,37,38,39,41,42,43,44,45,49,50,51,52,53,55,57,],[15,15,-27,-28,-9,-26,15,15,15,15,15,-8,-30,15,-11,-21,15,15,15,-13,15,15,-29,-22,-10,-20,-24,-25,-12,-23,-19,]),'$end':([1,3,4,6,7,8,18,27,],[-1,-4,-5,0,-3,-2,-6,-7,]),'LBRACE':([0,1,3,4,7,8,18,27,],[5,5,-4,-5,-3,-2,-6,-7,]),'OP_DIV':([12,],[23,]),'OUTPUT':([12,],[24,]),'ASSIGN':([12,],[25,]),'OP_SUB':([12,],[26,]),'IMPORT':([2,],[9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,],[1,]),'declaration':([20,24,33,40,],[32,32,48,48,]),'import_statement':([0,1,],[3,7,]),'component':([0,1,],[4,8,]),'expression_list':([10,],[13,]),'type':([31,],[47,]),'program':([0,],[6,]),'parameter_list':([19,21,22,23,26,],[30,37,38,39,43,]),'declaration_list':([20,24,],[33,40,]),'expression':([10,13,19,21,22,23,26,30,37,38,39,42,43,],[16,28,29,29,29,29,29,44,44,44,44,54,44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',23),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',27),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',31),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',32),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_input','parser.py',39),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_input','parser.py',40),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_output','parser.py',48),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_output','parser.py',49),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',57),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',58),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',66),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',67),
  ('type -> ID','type',1,'p_type','parser.py',75),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assign','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_functioncall','parser.py',85),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_functioncall','parser.py',86),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_operator','parser.py',95),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_operator','parser.py',96),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_operator','parser.py',97),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_operator','parser.py',98),
  ('expression -> ID','expression',1,'p_identification','parser.py',108),
  ('expression -> NUMBER','expression',1,'p_literal','parser.py',112),
  ('expression -> STRING','expression',1,'p_literal','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',121),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',122),
]
